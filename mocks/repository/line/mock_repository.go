// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/line/message.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLineMessageRepository is a mock of LineMessageRepository interface.
type MockLineMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLineMessageRepositoryMockRecorder
}

// MockLineMessageRepositoryMockRecorder is the mock recorder for MockLineMessageRepository.
type MockLineMessageRepositoryMockRecorder struct {
	mock *MockLineMessageRepository
}

// NewMockLineMessageRepository creates a new mock instance.
func NewMockLineMessageRepository(ctrl *gomock.Controller) *MockLineMessageRepository {
	mock := &MockLineMessageRepository{ctrl: ctrl}
	mock.recorder = &MockLineMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineMessageRepository) EXPECT() *MockLineMessageRepositoryMockRecorder {
	return m.recorder
}

// PushMessage mocks base method.
func (m *MockLineMessageRepository) PushMessage(ctx context.Context, userID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushMessage", ctx, userID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushMessage indicates an expected call of PushMessage.
func (mr *MockLineMessageRepositoryMockRecorder) PushMessage(ctx, userID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushMessage", reflect.TypeOf((*MockLineMessageRepository)(nil).PushMessage), ctx, userID, message)
}
