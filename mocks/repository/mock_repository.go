// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "go-ddd-template/src/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelloRepository is a mock of HelloRepository interface.
type MockHelloRepository struct {
	ctrl     *gomock.Controller
	recorder *MockHelloRepositoryMockRecorder
}

// MockHelloRepositoryMockRecorder is the mock recorder for MockHelloRepository.
type MockHelloRepositoryMockRecorder struct {
	mock *MockHelloRepository
}

// NewMockHelloRepository creates a new mock instance.
func NewMockHelloRepository(ctrl *gomock.Controller) *MockHelloRepository {
	mock := &MockHelloRepository{ctrl: ctrl}
	mock.recorder = &MockHelloRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloRepository) EXPECT() *MockHelloRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockHelloRepository) Find(ctx context.Context, id int) (entity.Hello, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(entity.Hello)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockHelloRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockHelloRepository)(nil).Find), ctx, id)
}

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(ctx context.Context, userId, password, name string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, password, name)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(ctx, userId, password, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), ctx, userId, password, name)
}

// FindUserId mocks base method.
func (m *MockAccountRepository) FindUserId(ctx context.Context, userId string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserId", ctx, userId)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserId indicates an expected call of FindUserId.
func (mr *MockAccountRepositoryMockRecorder) FindUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserId", reflect.TypeOf((*MockAccountRepository)(nil).FindUserId), ctx, userId)
}
