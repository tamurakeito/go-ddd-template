// Code generated by MockGen. DO NOT EDIT.
// Source: src/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthService) GenerateToken(userId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthServiceMockRecorder) GenerateToken(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthService)(nil).GenerateToken), userId)
}

// JWTMiddleware mocks base method.
func (m *MockAuthService) JWTMiddleware() echo.MiddlewareFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTMiddleware")
	ret0, _ := ret[0].(echo.MiddlewareFunc)
	return ret0
}

// JWTMiddleware indicates an expected call of JWTMiddleware.
func (mr *MockAuthServiceMockRecorder) JWTMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTMiddleware", reflect.TypeOf((*MockAuthService)(nil).JWTMiddleware))
}

// MockEncryptService is a mock of EncryptService interface.
type MockEncryptService struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptServiceMockRecorder
}

// MockEncryptServiceMockRecorder is the mock recorder for MockEncryptService.
type MockEncryptServiceMockRecorder struct {
	mock *MockEncryptService
}

// NewMockEncryptService creates a new mock instance.
func NewMockEncryptService(ctrl *gomock.Controller) *MockEncryptService {
	mock := &MockEncryptService{ctrl: ctrl}
	mock.recorder = &MockEncryptServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptService) EXPECT() *MockEncryptServiceMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockEncryptService) ComparePassword(hashedPassword, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", hashedPassword, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockEncryptServiceMockRecorder) ComparePassword(hashedPassword, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockEncryptService)(nil).ComparePassword), hashedPassword, password)
}

// HashPassword mocks base method.
func (m *MockEncryptService) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockEncryptServiceMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockEncryptService)(nil).HashPassword), password)
}
